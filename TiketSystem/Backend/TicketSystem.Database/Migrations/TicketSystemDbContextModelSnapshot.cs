// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicketSystem.Database;

#nullable disable

namespace TicketSystem.Database.Migrations
{
    [DbContext(typeof(TicketSystemDbContext))]
    partial class TicketSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("task_seq");

            modelBuilder.HasSequence("task_status_seq");

            modelBuilder.HasSequence("user_seq");

            modelBuilder.Entity("TicketSystem.Database.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('task_seq'::regclass)");

                    b.Property<string>("Cabinet")
                        .HasColumnType("text")
                        .HasColumnName("cabinet");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("TaskStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("task_status_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("task_pk");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("task", (string)null);
                });

            modelBuilder.Entity("TicketSystem.Database.Models.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('task_status_seq'::regclass)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("task_status_pk");

                    b.ToTable("task_status", (string)null);
                });

            modelBuilder.Entity("TicketSystem.Database.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("nextval('user_seq'::regclass)");

                    b.Property<string>("UserFirstName")
                        .HasColumnType("text")
                        .HasColumnName("user_first_name");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<string>("UserPassword")
                        .HasColumnType("text")
                        .HasColumnName("user_password");

                    b.Property<string>("UserPatronymic")
                        .HasColumnType("text")
                        .HasColumnName("user_patronymic");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("user_role_id");

                    b.Property<string>("UserSurname")
                        .HasColumnType("text")
                        .HasColumnName("user_surname");

                    b.HasKey("UserId")
                        .HasName("user_pk");

                    b.HasIndex("UserRoleId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("TicketSystem.Database.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("user_role_pk");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("TicketSystem.Database.Models.Task", b =>
                {
                    b.HasOne("TicketSystem.Database.Models.TaskStatus", "TaskStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskStatusId")
                        .HasConstraintName("task_task_status_fk");

                    b.HasOne("TicketSystem.Database.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("task_user_fk");

                    b.Navigation("TaskStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketSystem.Database.Models.User", b =>
                {
                    b.HasOne("TicketSystem.Database.Models.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_fk");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("TicketSystem.Database.Models.TaskStatus", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TicketSystem.Database.Models.User", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TicketSystem.Database.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
